// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  password          String
  username          String
  email    String   @unique
  verificationToken String?
  isVerified        Boolean   @default(false)
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  isOnline          Boolean   @default(false) 
   conversationsAsUser1 Conversation[] @relation("User1Conversations")
  conversationsAsUser2 Conversation[] @relation("User2Conversations")
    friendships1 Friendship[] @relation("Friendships1")
  friendships2 Friendship[] @relation("Friendships2")
}



model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  seen      Boolean  @default(false)
  status    MessageStatus @default(SENT)
  //sendTime   DateTime    @default(now())
  conversationId String  @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id])
    @@index([senderId, receiverId, seen])

}

model Conversation {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user1Id           String        @db.ObjectId
  user2Id           String        @db.ObjectId
  unseenMessageCountOfUser1 Int          @default(0)
  unseenMessageCountOfUser2 Int          @default(0)
  user1             User          @relation("User1Conversations", fields: [user1Id], references: [id])
  user2             User          @relation("User2Conversations", fields: [user2Id], references: [id])
  updateChatAt                 DateTime    @default(now())
  lastMessage               String?
  lastMessageTime           DateTime?
  messages          Message[]
   @@index([user1Id, user2Id])
  @@index([updateChatAt])
}

model Friendship {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id     String   @db.ObjectId
  user2Id     String   @db.ObjectId
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user1       User     @relation("Friendships1", fields: [user1Id], references: [id])
  user2       User     @relation("Friendships2", fields: [user2Id], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}


enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}